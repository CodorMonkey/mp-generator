package ${package.Entity}

#foreach($pkg in ${table.importPackages})
import ${pkg}
#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 */
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${superEntityClass})
open class ${entity} : ${superEntityClass}#if(${activeRecord})<${entity}>#end() {
#elseif(${activeRecord})
open class ${entity} : Model<${entity}>() {
#else
open class ${entity} : Serializable {
#end

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if("$!field.comment" != "")
        /**
         * ${field.comment}
         */
    #end
    #if(${field.keyFlag})
    ## 主键
        #if(${field.keyIdentityFlag})
        @TableId(value = "${field.name}", type = IdType.AUTO)
        #elseif(!$null.isNull(${idType}) && "$!idType" != "")
        @TableId(value = "${field.name}", type = IdType.${idType})
        #elseif(${field.convert})
        @TableId("${field.name}")
        #end
    ## 普通字段
    #elseif(${field.fill})
    ## -----   存在字段填充设置   -----
        #if(${field.convert})
        @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
        #elseif(${field.fill} == "UPDATE")
        @TableField(update = "now()")
        #end
    #elseif(${field.convert})
    @TableField("${field.name}")
    #end
## 乐观锁注解
    #if(${versionFieldName}==${field.name})
    @Version
    #end
## 逻辑删除注解
    #if(${logicDeleteFieldName}==${field.name})
    @TableLogic
    #end
var ${field.propertyName}: ${field.propertyType}? = null
#end
## ----------  END 字段循环遍历  ----------


#if(${entityColumnConstant})
    companion object {
        #foreach($field in ${table.fields})

            const val ${field.name.toUpperCase()} : String = "${field.name}"

        #end
    }

#end
#if(${activeRecord})
    override fun pkVal(): Serializable {
        #if(${keyPropertyName})
        return ${keyPropertyName}!!
        #else
        return id!!
        #end
    }

#end
    override fun toString(): String {
        return "${entity}{" +
            #foreach($field in ${table.fields})
                #if($!{foreach.index}==0)
               "${field.propertyName}=" + ${field.propertyName} +
                #else
                ", ${field.propertyName}=" + ${field.propertyName} +
                #end
            #end
        "}"
    }
}