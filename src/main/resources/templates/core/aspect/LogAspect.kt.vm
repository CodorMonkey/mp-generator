package ${basePackage}.core.aspect

import org.aspectj.lang.ProceedingJoinPoint
import org.aspectj.lang.annotation.Around
import org.aspectj.lang.annotation.Aspect
import org.slf4j.LoggerFactory
import org.springframework.core.annotation.Order
import org.springframework.stereotype.Component
import org.springframework.web.context.request.RequestContextHolder
import org.springframework.web.context.request.ServletRequestAttributes


/**
 * 作者：Monkey
 * 日期：2017/7/13
 */
@Aspect
@Component
class LogAspect {
    private val logger = LoggerFactory.getLogger(javaClass)

    @Order(10)
    @Around("execution(public * com..*.controller.*.*(..))")
    fun doAround(pjp: ProceedingJoinPoint): Any? {
        val startTime = System.currentTimeMillis()
        // 接收到请求，记录请求内容
        val attributes = RequestContextHolder.getRequestAttributes() as ServletRequestAttributes
        val request = attributes.request
        val ob: Any?
        try {
            ob = pjp.proceed() // ob 为方法的返回值
        } catch (e: Exception) {
            throw e
        } finally {
            // 记录下请求内容
            val args = pjp.args
            logger.info("{}  {}  {} {}ms", request.method, request.requestURL, args, System.currentTimeMillis() - startTime)
        }
        return ob
    }
}
