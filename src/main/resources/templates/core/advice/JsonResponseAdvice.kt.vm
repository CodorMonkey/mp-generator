package ${basePackage}.core.advice

import com.alibaba.fastjson.JSON
import com.baomidou.mybatisplus.extension.plugins.pagination.Page
import ${basePackage}.core.anno.NoPacking
import ${basePackage}.core.result.BaseResponse
import ${basePackage}.core.result.PageResult
import org.springframework.core.MethodParameter
import org.springframework.http.MediaType
import org.springframework.http.converter.HttpMessageConverter
import org.springframework.http.server.ServerHttpRequest
import org.springframework.http.server.ServerHttpResponse
import org.springframework.web.bind.annotation.RestControllerAdvice
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice

/**
 * author：Monkey
 * date：2018/8/20
 */
@RestControllerAdvice
class JsonResponseAdvice : ResponseBodyAdvice<Any> {
    override fun supports(parameter: MethodParameter, clazz: Class<out HttpMessageConverter<*>>): Boolean {
        return true
    }

    override fun beforeBodyWrite(returnValue: Any?,
                                 parameter: MethodParameter,
                                 mediaType: MediaType,
                                 clazz: Class<out HttpMessageConverter<*>>,
                                 req: ServerHttpRequest,
                                 res: ServerHttpResponse): Any? {
        val uri = req.uri
        val reqPath = uri.path

        if (reqPath.contains("/swagger-") || reqPath.contains("/v2/api-docs")) {
            return returnValue
        }

        return when (returnValue) {
            is BaseResponse
                       -> returnValue
            is Page<*> -> {
                val pageResult = PageResult(
                    returnValue.current, returnValue.size, returnValue.total, returnValue.pages, returnValue.records
                )
                BaseResponse.buildSuccess(data = pageResult)
            }
            is String  -> {
                val nopacking = parameter.method?.getDeclaredAnnotation(NoPacking::class.java)
                if (nopacking == null) {
                    JSON.toJSONString(BaseResponse.buildSuccess(data = returnValue))
                } else {
                    returnValue
                }
            }
            else       -> BaseResponse.buildSuccess(data = returnValue)
        }
    }
}